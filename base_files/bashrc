# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#Beginning of sherlock!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#For base
export PATH=~/bin:$PATH

#For intel
#add by for android building
#export PATH=/usr/lib/jvm/java-6-sun/bin:$PATH
#export PATH=/home/sherlock/envtools/gcc-linaro-arm-linux-gnueabihf-4.7-2013.03-20130313_linux/bin:$PATH
export PATH=/home/sherlock/envtools/gcc-linaro-arm-linux-gnueabihf-4.9-glibc-2.20/bin:$PATH
#export PATH=/home/sherlock/envtools/gcc-linaro-arm-linux-gnueabihf-4.9-glibc-2.20/arm-linux-gnueabihf/bin:$PATH
#export JAVA_HOME=~/envtools/Android_studio/jdk1.7.0_71
#export JDK_HOME=~/envtools/Android_studio/jdk1.7.0_71
#export PATH=$PATH:$JDK_HOME/bin
#export PATH=$PATH:~/envtool/poky/bitbake/bin
#export PATH=/home1/fanghu1x/pshsdk/toolchain/linux-x86_64/i686-elf-gcc/bin:$PATH
#export PATH=~/bin/i686-elf-gcc/bin:$PATH

#export C_INCLUDE_PATH=/home/sherlock/envtools/gcc-linaro-arm-linux-gnueabihf-4.9-glibc-2.20/arm-linux-gnueabihf/include:$C_INCLUDE_PATH
#/home/sherlock/envtools/gcc-linaro-arm-linux-gnueabihf-4.9-glibc-2.20/arm-linux-gnueabihf/libc/usr/include
#export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/usr/include/libxml2:/MyLib
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/MyLib
#export LIBRARY_PATH=$LIBRARY_PATH:/MyLib

#For proxy
#export GIT_PROXY_COMMAND=/usr/local/bin/socks-gateway
#export TERM=xterm
#export http_proxy='http://proxy-shz.intel.com:912/'
#export https_proxy='http://proxy-shz.intel.com:912/'
#export ftp_proxy='http://proxy-shz.intel.com:912/'
#export http_proxy='http://proxy.cd.intel.com:911/'
#export https_proxy='http://proxy.cd.intel.com:911/'
#export ftp_proxy='http://proxy.cd.intel.com:911/'
#*************************************************

#Set the title name
function title-set() {
	if [[ -z "$ORIG" ]]; then
		ORIG=$PS1
	fi
	TITLE="\[\e]2;$*\a\]"
	PS1=${ORIG}${TITLE}
}

#**************************************************
color_NONE="\033[m"
color_RED="\033[0;32;31m"
color_LIGHT_RED="\033[1;31m"
color_GREEN="\033[0;32;32m"
color_BLUE="\033[0;32;34m"
color_BROWN="\033[0;33m"
color_YELLOW="\033[1;33m"
color_WHITE="\033[1;37m"


mkdir -p ~/.trash
alias rm=trash
alias rl='ls ~/.trash'
alias ur=undelfile
undelfile()
{
    echo -e $color_BROWN"Refind the deleted files"$color_WHITE
    mv -i ~/.trash/$@ ./
}
trash()
{
    echo $@
    local del_files=$(echo $@ | sed -n 's/-rf//g;p')
    echo -e $color_GREEN"remove the dir:"
    readlink -f $del_files
    echo -e $color_RED
	read -p "clear sure?[y/n/trash]" confirm
	if [ "$confirm" = 'y'  ] || [ "$confirm" == 'Y'  ]; then
		/bin/rm $del_files -rf
	elif [ "$confirm" = 'T'  ] || [ "$confirm" == 't'  ]; then
		mv $del_files ~/.trash/
		echo -e $color_BROWN"Mv to ~/.trash"$color_WHITE
    else
		echo "Delete failed"
	fi
    echo -e $color_WHITE
}
cleartrash()
{
	read -p "clear sure?[y/n]" confirm
	[ $confirm == 'y'  ] || [ $confirm == 'Y'  ]  && /bin/rm -rf ~/.trash/*
}

#*************************************************

funcs_complete()
{
    local cur
    cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=(`global -c $cur`)
}
complete -F funcs_complete global

#Must in the end
source ~/bin/bashmarks.sh
#Ending of sherlock!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
